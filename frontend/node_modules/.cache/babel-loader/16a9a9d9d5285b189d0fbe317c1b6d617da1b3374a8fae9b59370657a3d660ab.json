{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import{Typography,Card,CardContent}from\"@mui/material\";import{MapContainer,TileLayer,GeoJSON}from\"react-leaflet\";import L from'leaflet';// Map Component\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const DisasterMap=_ref=>{let{country,geoJsonData}=_ref;const[mapCenter,setMapCenter]=useState([0,0]);const[zoom]=useState(4);useEffect(()=>{if(geoJsonData){try{const bounds=L.geoJSON(geoJsonData).getBounds();setMapCenter([(bounds.getNorth()+bounds.getSouth())/2,(bounds.getEast()+bounds.getWest())/2]);}catch(error){console.error('Error processing GeoJSON:',error);setMapCenter([0,0]);}}},[geoJsonData]);return/*#__PURE__*/_jsx(Card,{sx:{height:'100%',p:2},children:/*#__PURE__*/_jsxs(CardContent,{children:[/*#__PURE__*/_jsx(Typography,{variant:\"h6\",sx:{mb:2},children:\"Impact Map\"}),/*#__PURE__*/_jsx(\"div\",{style:{height:'400px',width:'100%'},children:/*#__PURE__*/_jsxs(MapContainer,{center:mapCenter,zoom:zoom,style:{height:'100%',width:'100%'},children:[/*#__PURE__*/_jsx(TileLayer,{url:\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",attribution:\"\\xA9 OpenStreetMap contributors\"}),geoJsonData&&/*#__PURE__*/_jsx(GeoJSON,{data:geoJsonData,style:{fillColor:'#ef233c',weight:2,opacity:1,color:'white',fillOpacity:0.7}})]})})]})});};export default DisasterMap;","map":{"version":3,"names":["React","useState","useEffect","Typography","Card","CardContent","MapContainer","TileLayer","GeoJSON","L","jsx","_jsx","jsxs","_jsxs","DisasterMap","_ref","country","geoJsonData","mapCenter","setMapCenter","zoom","bounds","geoJSON","getBounds","getNorth","getSouth","getEast","getWest","error","console","sx","height","p","children","variant","mb","style","width","center","url","attribution","data","fillColor","weight","opacity","color","fillOpacity"],"sources":["C:/Users/LENOVO/Desktop/catastropi/doomindex/src/components/DisasterMap.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Typography,\r\n  Card,\r\n  CardContent,\r\n} from \"@mui/material\";\r\nimport { MapContainer, TileLayer, GeoJSON } from \"react-leaflet\";\r\nimport L from 'leaflet';\r\n\r\n// Map Component\r\nconst DisasterMap = ({ country, geoJsonData }) => {\r\n    const [mapCenter, setMapCenter] = useState([0, 0]);\r\n    const [zoom] = useState(4);\r\n  \r\n    useEffect(() => {\r\n      if (geoJsonData) {\r\n        try {\r\n          const bounds = L.geoJSON(geoJsonData).getBounds();\r\n          setMapCenter([\r\n            (bounds.getNorth() + bounds.getSouth()) / 2,\r\n            (bounds.getEast() + bounds.getWest()) / 2\r\n          ]);\r\n        } catch (error) {\r\n          console.error('Error processing GeoJSON:', error);\r\n          setMapCenter([0, 0]);\r\n        }\r\n      }\r\n    }, [geoJsonData]);\r\n  \r\n    return (\r\n      <Card sx={{ height: '100%', p: 2 }}>\r\n        <CardContent>\r\n          <Typography variant=\"h6\" sx={{ mb: 2 }}>Impact Map</Typography>\r\n          <div style={{ height: '400px', width: '100%' }}>\r\n            <MapContainer\r\n              center={mapCenter}\r\n              zoom={zoom}\r\n              style={{ height: '100%', width: '100%' }}\r\n            >\r\n              <TileLayer\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                attribution='&copy; OpenStreetMap contributors'\r\n              />\r\n              {geoJsonData && (\r\n                <GeoJSON\r\n                  data={geoJsonData}\r\n                  style={{\r\n                    fillColor: '#ef233c',\r\n                    weight: 2,\r\n                    opacity: 1,\r\n                    color: 'white',\r\n                    fillOpacity: 0.7\r\n                  }}\r\n                />\r\n              )}\r\n            </MapContainer>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  };\r\nexport default DisasterMap;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,OACEC,UAAU,CACVC,IAAI,CACJC,WAAW,KACN,eAAe,CACtB,OAASC,YAAY,CAAEC,SAAS,CAAEC,OAAO,KAAQ,eAAe,CAChE,MAAO,CAAAC,CAAC,KAAM,SAAS,CAEvB;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBACA,KAAM,CAAAC,WAAW,CAAGC,IAAA,EAA8B,IAA7B,CAAEC,OAAO,CAAEC,WAAY,CAAC,CAAAF,IAAA,CACzC,KAAM,CAACG,SAAS,CAAEC,YAAY,CAAC,CAAGlB,QAAQ,CAAC,CAAC,CAAC,CAAE,CAAC,CAAC,CAAC,CAClD,KAAM,CAACmB,IAAI,CAAC,CAAGnB,QAAQ,CAAC,CAAC,CAAC,CAE1BC,SAAS,CAAC,IAAM,CACd,GAAIe,WAAW,CAAE,CACf,GAAI,CACF,KAAM,CAAAI,MAAM,CAAGZ,CAAC,CAACa,OAAO,CAACL,WAAW,CAAC,CAACM,SAAS,CAAC,CAAC,CACjDJ,YAAY,CAAC,CACX,CAACE,MAAM,CAACG,QAAQ,CAAC,CAAC,CAAGH,MAAM,CAACI,QAAQ,CAAC,CAAC,EAAI,CAAC,CAC3C,CAACJ,MAAM,CAACK,OAAO,CAAC,CAAC,CAAGL,MAAM,CAACM,OAAO,CAAC,CAAC,EAAI,CAAC,CAC1C,CAAC,CACJ,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,CAAEA,KAAK,CAAC,CACjDT,YAAY,CAAC,CAAC,CAAC,CAAE,CAAC,CAAC,CAAC,CACtB,CACF,CACF,CAAC,CAAE,CAACF,WAAW,CAAC,CAAC,CAEjB,mBACEN,IAAA,CAACP,IAAI,EAAC0B,EAAE,CAAE,CAAEC,MAAM,CAAE,MAAM,CAAEC,CAAC,CAAE,CAAE,CAAE,CAAAC,QAAA,cACjCpB,KAAA,CAACR,WAAW,EAAA4B,QAAA,eACVtB,IAAA,CAACR,UAAU,EAAC+B,OAAO,CAAC,IAAI,CAACJ,EAAE,CAAE,CAAEK,EAAE,CAAE,CAAE,CAAE,CAAAF,QAAA,CAAC,YAAU,CAAY,CAAC,cAC/DtB,IAAA,QAAKyB,KAAK,CAAE,CAAEL,MAAM,CAAE,OAAO,CAAEM,KAAK,CAAE,MAAO,CAAE,CAAAJ,QAAA,cAC7CpB,KAAA,CAACP,YAAY,EACXgC,MAAM,CAAEpB,SAAU,CAClBE,IAAI,CAAEA,IAAK,CACXgB,KAAK,CAAE,CAAEL,MAAM,CAAE,MAAM,CAAEM,KAAK,CAAE,MAAO,CAAE,CAAAJ,QAAA,eAEzCtB,IAAA,CAACJ,SAAS,EACRgC,GAAG,CAAC,oDAAoD,CACxDC,WAAW,CAAC,iCAAmC,CAChD,CAAC,CACDvB,WAAW,eACVN,IAAA,CAACH,OAAO,EACNiC,IAAI,CAAExB,WAAY,CAClBmB,KAAK,CAAE,CACLM,SAAS,CAAE,SAAS,CACpBC,MAAM,CAAE,CAAC,CACTC,OAAO,CAAE,CAAC,CACVC,KAAK,CAAE,OAAO,CACdC,WAAW,CAAE,GACf,CAAE,CACH,CACF,EACW,CAAC,CACZ,CAAC,EACK,CAAC,CACV,CAAC,CAEX,CAAC,CACH,cAAe,CAAAhC,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}