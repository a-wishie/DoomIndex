{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\Desktop\\\\catastropi\\\\doomindex\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Container, Typography, Button, TextField, AppBar, Toolbar, Grid, Box } from \"@mui/material\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport { parse } from 'papaparse';\nimport L from 'leaflet';\nimport \"leaflet/dist/leaflet.css\";\n\n// Import data and assets\nimport disastersData from './data/data.csv';\nimport countriesGeoJSON from './data/countries.geo.json';\nimport countries from \"./components/Countries.js\";\n\n// Import components\nimport DisasterCards from \"./components/DisasterCards.js\";\nimport StatsPanel from \"./components/StatsPanel.js\";\nimport HistoricalTrends from \"./components/HistoricalTrends.js\";\nimport DisasterMap from \"./components/DisasterMap.js\";\nimport AIAssistantTabs from \"./components/AIAssistantTabs.js\";\n\n// Fix Leaflet icon issue\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n});\n\n// Main App Component\nconst App = () => {\n  _s();\n  const [country, setCountry] = useState(null);\n  const [year, setYear] = useState(null);\n  const [disasterType, setDisasterType] = useState(null);\n  const [availableYears, setAvailableYears] = useState([]);\n  const [searchResults, setSearchResults] = useState(null);\n  const [geoJsonData, setGeoJsonData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [allDisastersData, setAllDisastersData] = useState([]);\n  const [selectedDisaster, setSelectedDisaster] = useState(null);\n\n  // Disaster types list\n  const disasters = [{\n    label: \"Drought\"\n  }, {\n    label: \"Earthquake\"\n  }, {\n    label: \"Epidemic\"\n  }, {\n    label: \"Extreme Temperature\"\n  }, {\n    label: \"Flood\"\n  }, {\n    label: \"Landslide\"\n  }, {\n    label: \"Storm\"\n  }, {\n    label: \"Wildfire\"\n  }];\n\n  // Data Loading Effect\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        // Load CSV Data\n        const csvResponse = await fetch(disastersData);\n        const csvText = await csvResponse.text();\n        const parsedData = parse(csvText, {\n          header: true,\n          dynamicTyping: true,\n          skipEmptyLines: true\n        }).data;\n        const transformedData = parsedData.map(item => ({\n          country: item.ISO,\n          year: item['Start Year'],\n          disaster_type: item['Disaster Type'],\n          total_deaths: item['Total Deaths'] || 0,\n          affected_population: item['Total Affected'] || 0,\n          economic_loss: item['Total Damages (\\'000 US$)'] || 0\n        }));\n        setAllDisastersData(transformedData);\n\n        // Load GeoJSON\n        const geoResponse = await fetch(countriesGeoJSON);\n        const geoData = await geoResponse.json();\n        setGeoJsonData(geoData);\n      } catch (error) {\n        console.error('Data Loading Error:', error);\n        setError('Failed to load disaster data');\n      }\n    };\n    loadData();\n  }, []);\n\n  // Update Available Years\n  useEffect(() => {\n    if (!country || !disasterType) {\n      setAvailableYears([]);\n      return;\n    }\n    const years = [...new Set(allDisastersData.filter(item => item.country === country.code && item.disaster_type === disasterType.label).map(item => item.year))].sort();\n    setAvailableYears(years.map(String));\n  }, [country, disasterType, allDisastersData]);\n\n  // Search Handler\n  const handleSearch = () => {\n    if (!country || !disasterType || !year) return;\n    setLoading(true);\n    setError(null);\n    try {\n      const filteredResults = allDisastersData.filter(item => item.country === country.code && item.disaster_type === disasterType.label && item.year === parseInt(year));\n      const countryGeoJson = geoJsonData.features.filter(feature => feature.id === country.code);\n      if (filteredResults.length > 0) {\n        setSearchResults(filteredResults);\n        setSelectedDisaster(filteredResults[0]);\n        setGeoJsonData({\n          type: 'FeatureCollection',\n          features: countryGeoJson\n        });\n      } else {\n        setError('No data found for selected criteria');\n        setSearchResults(null);\n        setSelectedDisaster(null);\n      }\n    } catch (error) {\n      console.error('Search Error:', error);\n      setError('Failed to process disaster data');\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"xl\",\n    children: [/*#__PURE__*/_jsxDEV(AppBar, {\n      position: \"static\",\n      sx: {\n        backgroundColor: \"#2b2d42\",\n        mb: 4\n      },\n      children: /*#__PURE__*/_jsxDEV(Toolbar, {\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h2\",\n          sx: {\n            flexGrow: 1,\n            textAlign: 'center',\n            fontFamily: \"DisplayFont\",\n            color: \"#edf2f4\"\n          },\n          children: \"DoomIndex\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mb: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        sx: {\n          mb: 2\n        },\n        children: \"Welcome to DoomIndex\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        sx: {\n          mb: 4\n        },\n        children: \"DoomIndex is your comprehensive platform for accessing and understanding disaster-related information from across the globe. This interactive tool merges historical disaster data with advanced AI technology to offer valuable insights and enhance disaster response and preparedness.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        sx: {\n          mb: 2\n        },\n        children: \"Key Features\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        sx: {\n          mb: 4\n        },\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: \" Advanced disaster search and filtering capabilities \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \" AI-powered disaster summaries and analysis\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \" Real-time public information updates\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \" Interactive disaster response chatbot\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \" Educational resources and preparedness guides\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        sx: {\n          mb: 2\n        },\n        children: \"What You Can Do\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        sx: {\n          mb: 4\n        },\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Search and explore historical disaster data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Gain detailed insights about specific disasters\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Access preparedness and response plans\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Engage with our AI-powered chatbot for disaster-related queries\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Learn about disaster prevention and preparedness\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        sx: {\n          mb: 2\n        },\n        children: \"How It Works\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        sx: {\n          mb: 4\n        },\n        children: \"The DoomIndex dashboard utilizes cutting-edge AI technology powered by Gemini to analyze disaster data and deliver meaningful insights. Simply search for a disaster by country, year, or type, and instantly access comprehensive information, including summaries, public updates, response plans, and educational content. Our interactive chatbot is available to answer your specific questions about any disaster in our database.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        sx: {\n          mb: 4\n        },\n        children: \"Data is sourced from verified global disaster databases and processed in real-time to ensure the most up-to-date and relevant information. In case of an emergency, please always contact your local emergency services first.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      sx: {\n        mt: 4,\n        mb: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 3,\n        children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n          options: countries,\n          value: country,\n          onChange: (_, newValue) => {\n            setCountry(newValue);\n            setYear(null);\n          },\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n            ...params,\n            label: \"Country\",\n            variant: \"outlined\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 3,\n        children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n          options: disasters,\n          value: disasterType,\n          onChange: (_, newValue) => {\n            setDisasterType(newValue);\n            setYear(null);\n          },\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n            ...params,\n            label: \"Disaster Type\",\n            variant: \"outlined\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 3,\n        children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n          options: availableYears,\n          value: year,\n          onChange: (_, newValue) => setYear(newValue),\n          disabled: !country || !disasterType,\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n            ...params,\n            label: \"Year\",\n            variant: \"outlined\",\n            helperText: !country || !disasterType ? \"Select country and disaster type first\" : availableYears.length === 0 ? \"No years available\" : \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 3,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: handleSearch,\n          disabled: !country || !disasterType || !year || loading,\n          sx: {\n            borderRadius: '30px',\n            backgroundColor: '#ef233c',\n            color: '#edf2f4',\n            padding: '15px 30px'\n          },\n          children: loading ? 'Searching...' : 'Search'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(Typography, {\n      color: \"error\",\n      sx: {\n        mt: 2,\n        mb: 2\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 9\n    }, this), searchResults && /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 4,\n        children: /*#__PURE__*/_jsxDEV(DisasterMap, {\n          country: country,\n          geoJsonData: geoJsonData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 4,\n        children: /*#__PURE__*/_jsxDEV(StatsPanel, {\n          data: searchResults\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 4,\n        children: /*#__PURE__*/_jsxDEV(HistoricalTrends, {\n          data: searchResults\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 9\n    }, this), selectedDisaster && /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 4\n      },\n      children: /*#__PURE__*/_jsxDEV(AIAssistantTabs, {\n        disaster: selectedDisaster\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        backgroundColor: \"#2b2d42\",\n        color: \"#edf2f4\",\n        padding: \"20px\",\n        marginTop: \"40px\",\n        textAlign: \"center\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        children: \"Contact: info@doomindex.com | \\xA9 2024 DoomIndex. All Rights Reserved.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"UGYVMk0P9w4BimuBkI+j+d3/NVc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Container","Typography","Button","TextField","AppBar","Toolbar","Grid","Box","Autocomplete","parse","L","disastersData","countriesGeoJSON","countries","DisasterCards","StatsPanel","HistoricalTrends","DisasterMap","AIAssistantTabs","jsxDEV","_jsxDEV","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","App","_s","country","setCountry","year","setYear","disasterType","setDisasterType","availableYears","setAvailableYears","searchResults","setSearchResults","geoJsonData","setGeoJsonData","loading","setLoading","error","setError","allDisastersData","setAllDisastersData","selectedDisaster","setSelectedDisaster","disasters","label","loadData","csvResponse","fetch","csvText","text","parsedData","header","dynamicTyping","skipEmptyLines","data","transformedData","map","item","ISO","disaster_type","total_deaths","affected_population","economic_loss","geoResponse","geoData","json","console","years","Set","filter","code","sort","String","handleSearch","filteredResults","parseInt","countryGeoJson","features","feature","id","length","type","maxWidth","children","position","sx","backgroundColor","mb","variant","flexGrow","textAlign","fontFamily","color","fileName","_jsxFileName","lineNumber","columnNumber","container","spacing","mt","xs","sm","options","value","onChange","_","newValue","renderInput","params","disabled","helperText","onClick","borderRadius","padding","md","disaster","marginTop","_c","$RefreshReg$"],"sources":["C:/Users/LENOVO/Desktop/catastropi/doomindex/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { \n  Container, \n  Typography, \n  Button, \n  TextField, \n  AppBar, \n  Toolbar, \n  Grid, \n  Box \n} from \"@mui/material\";\n\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport { parse } from 'papaparse';\nimport L from 'leaflet';\nimport \"leaflet/dist/leaflet.css\";\n\n// Import data and assets\nimport disastersData from './data/data.csv';\nimport countriesGeoJSON from './data/countries.geo.json';\nimport countries from \"./components/Countries.js\";\n\n// Import components\nimport DisasterCards from \"./components/DisasterCards.js\";\nimport StatsPanel from \"./components/StatsPanel.js\";\nimport HistoricalTrends from \"./components/HistoricalTrends.js\";\nimport DisasterMap from \"./components/DisasterMap.js\";\nimport AIAssistantTabs from \"./components/AIAssistantTabs.js\";\n\n// Fix Leaflet icon issue\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png'),\n});\n\n// Main App Component\nconst App = () => {\n  const [country, setCountry] = useState(null);\n  const [year, setYear] = useState(null);\n  const [disasterType, setDisasterType] = useState(null);\n  const [availableYears, setAvailableYears] = useState([]);\n  const [searchResults, setSearchResults] = useState(null);\n  const [geoJsonData, setGeoJsonData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [allDisastersData, setAllDisastersData] = useState([]);\n  const [selectedDisaster, setSelectedDisaster] = useState(null);\n\n  // Disaster types list\n  const disasters = [\n    { label: \"Drought\" },\n    { label: \"Earthquake\" },\n    { label: \"Epidemic\" },\n    { label: \"Extreme Temperature\" },\n    { label: \"Flood\" },\n    { label: \"Landslide\" },\n    { label: \"Storm\" },\n    { label: \"Wildfire\" },\n  ];\n\n  // Data Loading Effect\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        // Load CSV Data\n        const csvResponse = await fetch(disastersData);\n        const csvText = await csvResponse.text();\n        const parsedData = parse(csvText, { \n          header: true,\n          dynamicTyping: true,\n          skipEmptyLines: true\n        }).data;\n\n        const transformedData = parsedData.map(item => ({\n          country: item.ISO,\n          year: item['Start Year'],\n          disaster_type: item['Disaster Type'],\n          total_deaths: item['Total Deaths'] || 0,\n          affected_population: item['Total Affected'] || 0,\n          economic_loss: item['Total Damages (\\'000 US$)'] || 0\n        }));\n\n        setAllDisastersData(transformedData);\n\n        // Load GeoJSON\n        const geoResponse = await fetch(countriesGeoJSON);\n        const geoData = await geoResponse.json();\n        setGeoJsonData(geoData);\n\n      } catch (error) {\n        console.error('Data Loading Error:', error);\n        setError('Failed to load disaster data');\n      }\n    };\n\n    loadData();\n  }, []);\n\n  // Update Available Years\n  useEffect(() => {\n    if (!country || !disasterType) {\n      setAvailableYears([]);\n      return;\n    }\n\n    const years = [...new Set(\n      allDisastersData\n        .filter(item => \n          item.country === country.code && \n          item.disaster_type === disasterType.label\n        )\n        .map(item => item.year)\n    )].sort();\n\n    setAvailableYears(years.map(String));\n  }, [country, disasterType, allDisastersData]);\n\n  // Search Handler\n  const handleSearch = () => {\n    if (!country || !disasterType || !year) return;\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      const filteredResults = allDisastersData.filter(item => \n        item.country === country.code && \n        item.disaster_type === disasterType.label && \n        item.year === parseInt(year)\n      );\n\n      const countryGeoJson = geoJsonData.features.filter(feature => \n        feature.id === country.code\n      );\n\n      if (filteredResults.length > 0) {\n        setSearchResults(filteredResults);\n        setSelectedDisaster(filteredResults[0]);\n        setGeoJsonData({\n          type: 'FeatureCollection',\n          features: countryGeoJson\n        });\n      } else {\n        setError('No data found for selected criteria');\n        setSearchResults(null);\n        setSelectedDisaster(null);\n      }\n    } catch (error) {\n      console.error('Search Error:', error);\n      setError('Failed to process disaster data');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Container maxWidth=\"xl\">\n      {/* Header */}\n      <AppBar position=\"static\" sx={{ backgroundColor: \"#2b2d42\", mb: 4 }}>\n        <Toolbar>\n          <Typography\n            variant=\"h2\"\n            sx={{\n              flexGrow: 1,\n              textAlign: 'center',\n              fontFamily: \"DisplayFont\",\n              color: \"#edf2f4\",\n            }}\n          >\n            DoomIndex\n          </Typography>\n        </Toolbar>\n      </AppBar>\n\n      {/* Introduction Section */}\n      <Box sx={{ mb: 4 }}>\n        <Typography variant=\"h4\" sx={{ mb: 2 }}>\n          Welcome to DoomIndex\n        </Typography>\n        \n        <Typography variant=\"body1\" sx={{ mb: 4 }}>\n        DoomIndex is your comprehensive platform for accessing and understanding disaster-related information from across the globe. This interactive tool merges historical disaster data with advanced AI technology to offer valuable insights and enhance disaster response and preparedness.\n        </Typography>\n  \n        <Typography variant=\"h4\" sx={{ mb: 2 }}>\n        Key Features\n        </Typography>\n        \n        <Typography variant=\"body1\" sx={{ mb: 4 }}>\n          <ul>\n            <li> Advanced disaster search and filtering capabilities </li>\n            <li> AI-powered disaster summaries and analysis</li>\n            <li> Real-time public information updates</li>\n            <li> Interactive disaster response chatbot</li>\n            <li> Educational resources and preparedness guides</li>\n          </ul>\n        </Typography>\n  \n        <Typography variant=\"h4\" sx={{ mb: 2 }}>\n        What You Can Do\n        </Typography>\n        \n        <Typography variant=\"body1\" sx={{ mb: 4 }}>\n        <ul>\n          <li>Search and explore historical disaster data</li>\n          <li>Gain detailed insights about specific disasters</li>\n          <li>Access preparedness and response plans</li>\n          <li>Engage with our AI-powered chatbot for disaster-related queries</li>\n          <li>Learn about disaster prevention and preparedness</li>\n        </ul>\n        </Typography>\n  \n        <Typography variant=\"h4\" sx={{ mb: 2 }}>\n        How It Works\n        </Typography>\n        \n        <Typography variant=\"body1\" sx={{ mb: 4 }}>\n        The DoomIndex dashboard utilizes cutting-edge AI technology powered by Gemini to analyze disaster data and deliver meaningful insights. Simply search for a disaster by country, year, or type, and instantly access comprehensive information, including summaries, public updates, response plans, and educational content. Our interactive chatbot is available to answer your specific questions about any disaster in our database.\n        </Typography>\n        <Typography variant=\"body1\" sx={{ mb: 4 }}>\n        Data is sourced from verified global disaster databases and processed in real-time to ensure the most up-to-date and relevant information. In case of an emergency, please always contact your local emergency services first.\n        </Typography>\n\n      </Box>\n\n      {/* Search Controls */}\n      <Grid container spacing={2} sx={{ mt: 4, mb: 4 }}>\n        <Grid item xs={12} sm={3}>\n          <Autocomplete\n            options={countries}\n            value={country}\n            onChange={(_, newValue) => {\n              setCountry(newValue);\n              setYear(null);\n            }}\n            renderInput={(params) => (\n              <TextField {...params} label=\"Country\" variant=\"outlined\" />\n            )}\n          />\n        </Grid>\n\n        <Grid item xs={12} sm={3}>\n          <Autocomplete\n            options={disasters}\n            value={disasterType}\n            onChange={(_, newValue) => {\n              setDisasterType(newValue);\n              setYear(null);\n            }}\n            renderInput={(params) => (\n              <TextField {...params} label=\"Disaster Type\" variant=\"outlined\" />\n            )}\n          />\n        </Grid>\n\n        <Grid item xs={12} sm={3}>\n          <Autocomplete\n            options={availableYears}\n            value={year}\n            onChange={(_, newValue) => setYear(newValue)}\n            disabled={!country || !disasterType}\n            renderInput={(params) => (\n              <TextField \n                {...params} \n                label=\"Year\" \n                variant=\"outlined\" \n                helperText={\n                  !country || !disasterType \n                    ? \"Select country and disaster type first\" \n                    : availableYears.length === 0 \n                    ? \"No years available\" \n                    : \"\"\n                }\n              />\n            )}\n          />\n        </Grid>\n\n        <Grid item xs={12} sm={3}>\n          <Button\n            variant=\"contained\"\n            onClick={handleSearch}\n            disabled={!country || !disasterType || !year || loading}\n            sx={{\n              borderRadius: '30px',\n              backgroundColor: '#ef233c',\n              color: '#edf2f4',\n              padding: '15px 30px',\n            }}\n          >\n            {loading ? 'Searching...' : 'Search'}\n          </Button>\n        </Grid>\n      </Grid>\n\n      {/* Error Handling */}\n      {error && (\n        <Typography color=\"error\" sx={{ mt: 2, mb: 2 }}>\n          {error}\n        </Typography>\n      )}\n\n      {/* Results Section */}\n      {searchResults && (\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={4}>\n            <DisasterMap \n              country={country} \n              geoJsonData={geoJsonData} \n            />\n          </Grid>\n          <Grid item xs={12} md={4}>\n            <StatsPanel data={searchResults} />\n          </Grid>\n          <Grid item xs={12} md={4}>\n            <HistoricalTrends data={searchResults} />\n          </Grid>\n        </Grid>\n      )}\n\n      {/* AI Assistant Tabs */}\n      {selectedDisaster && (\n        <Box sx={{ mt: 4 }}>\n          <AIAssistantTabs disaster={selectedDisaster} />\n        </Box>\n      )}\n\n      {/* Footer */}\n      <Box \n        sx={{\n          backgroundColor: \"#2b2d42\",\n          color: \"#edf2f4\",\n          padding: \"20px\",\n          marginTop: \"40px\",\n          textAlign: \"center\"\n        }}\n      >\n        <Typography variant=\"body2\">\n          Contact: info@doomindex.com | © 2024 DoomIndex. All Rights Reserved.\n        </Typography>\n      </Box>\n    </Container>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}