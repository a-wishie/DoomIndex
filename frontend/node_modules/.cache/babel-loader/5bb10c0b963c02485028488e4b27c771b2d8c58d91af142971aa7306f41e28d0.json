{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\Desktop\\\\catastropi\\\\doomindex\\\\src\\\\components\\\\DisasterMap.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Typography, Card, CardContent } from \"@mui/material\";\nimport \"./App.css\";\nimport { MapContainer, TileLayer, GeoJSON } from \"react-leaflet\";\nimport L from 'leaflet';\nimport \"leaflet/dist/leaflet.css\";\n\n// Map Component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DisasterMap = ({\n  country,\n  geoJsonData\n}) => {\n  _s();\n  const [mapCenter, setMapCenter] = useState([0, 0]);\n  const [zoom] = useState(4);\n  useEffect(() => {\n    if (geoJsonData) {\n      try {\n        const bounds = L.geoJSON(geoJsonData).getBounds();\n        setMapCenter([(bounds.getNorth() + bounds.getSouth()) / 2, (bounds.getEast() + bounds.getWest()) / 2]);\n      } catch (error) {\n        console.error('Error processing GeoJSON:', error);\n        setMapCenter([0, 0]);\n      }\n    }\n  }, [geoJsonData]);\n  return /*#__PURE__*/_jsxDEV(Card, {\n    sx: {\n      height: '100%',\n      p: 2\n    },\n    children: /*#__PURE__*/_jsxDEV(CardContent, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        sx: {\n          mb: 2\n        },\n        children: \"Impact Map\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: '400px',\n          width: '100%'\n        },\n        children: /*#__PURE__*/_jsxDEV(MapContainer, {\n          center: mapCenter,\n          zoom: zoom,\n          style: {\n            height: '100%',\n            width: '100%'\n          },\n          children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n            url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n            attribution: \"\\xA9 OpenStreetMap contributors\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 15\n          }, this), geoJsonData && /*#__PURE__*/_jsxDEV(GeoJSON, {\n            data: geoJsonData,\n            style: {\n              fillColor: '#ef233c',\n              weight: 2,\n              opacity: 1,\n              color: 'white',\n              fillOpacity: 0.7\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 7\n  }, this);\n};\n_s(DisasterMap, \"ZCcNzMuquiOXzJzhkB/4xSUe2Lc=\");\n_c = DisasterMap;\nexport default DisasterMap;\nvar _c;\n$RefreshReg$(_c, \"DisasterMap\");","map":{"version":3,"names":["React","useState","useEffect","Typography","Card","CardContent","MapContainer","TileLayer","GeoJSON","L","jsxDEV","_jsxDEV","DisasterMap","country","geoJsonData","_s","mapCenter","setMapCenter","zoom","bounds","geoJSON","getBounds","getNorth","getSouth","getEast","getWest","error","console","sx","height","p","children","variant","mb","fileName","_jsxFileName","lineNumber","columnNumber","style","width","center","url","attribution","data","fillColor","weight","opacity","color","fillOpacity","_c","$RefreshReg$"],"sources":["C:/Users/LENOVO/Desktop/catastropi/doomindex/src/components/DisasterMap.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Typography,\r\n  Card,\r\n  CardContent,\r\n} from \"@mui/material\";\r\nimport \"./App.css\";\r\nimport { MapContainer, TileLayer, GeoJSON } from \"react-leaflet\";\r\nimport L from 'leaflet';\r\nimport \"leaflet/dist/leaflet.css\";\r\n\r\n// Map Component\r\nconst DisasterMap = ({ country, geoJsonData }) => {\r\n    const [mapCenter, setMapCenter] = useState([0, 0]);\r\n    const [zoom] = useState(4);\r\n  \r\n    useEffect(() => {\r\n      if (geoJsonData) {\r\n        try {\r\n          const bounds = L.geoJSON(geoJsonData).getBounds();\r\n          setMapCenter([\r\n            (bounds.getNorth() + bounds.getSouth()) / 2,\r\n            (bounds.getEast() + bounds.getWest()) / 2\r\n          ]);\r\n        } catch (error) {\r\n          console.error('Error processing GeoJSON:', error);\r\n          setMapCenter([0, 0]);\r\n        }\r\n      }\r\n    }, [geoJsonData]);\r\n  \r\n    return (\r\n      <Card sx={{ height: '100%', p: 2 }}>\r\n        <CardContent>\r\n          <Typography variant=\"h6\" sx={{ mb: 2 }}>Impact Map</Typography>\r\n          <div style={{ height: '400px', width: '100%' }}>\r\n            <MapContainer\r\n              center={mapCenter}\r\n              zoom={zoom}\r\n              style={{ height: '100%', width: '100%' }}\r\n            >\r\n              <TileLayer\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                attribution='&copy; OpenStreetMap contributors'\r\n              />\r\n              {geoJsonData && (\r\n                <GeoJSON\r\n                  data={geoJsonData}\r\n                  style={{\r\n                    fillColor: '#ef233c',\r\n                    weight: 2,\r\n                    opacity: 1,\r\n                    color: 'white',\r\n                    fillOpacity: 0.7\r\n                  }}\r\n                />\r\n              )}\r\n            </MapContainer>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  };\r\nexport default DisasterMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}