{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\Desktop\\\\catastropi\\\\doomindex\\\\src\\\\App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Container, Typography, Button, TextField, Card, CardContent, CardMedia, AppBar, Toolbar, Grid } from \"@mui/material\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport axios from \"axios\";\nimport { MapContainer, TileLayer, GeoJSON } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport { scaleLinear } from \"d3-scale\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\n\n// Utility function to process CSV data\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst processCSVData = (csvData, country, year, disasterType) => {\n  return csvData.filter(row => row.country === country.label && row.year.toString() === year && row.disaster_type === disasterType.label);\n};\n\n// Stats Panel Component\nconst StatsPanel = ({\n  data\n}) => {\n  var _stats$total_deaths, _stats$affected_popul, _stats$economic_loss;\n  if (!data || data.length === 0) return /*#__PURE__*/_jsxDEV(Typography, {\n    children: \"No data available\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 42\n  }, this);\n  const stats = data[0]; // Assuming we're showing stats for the first matching record\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"h-full p-4 bg-gray-50\",\n    children: /*#__PURE__*/_jsxDEV(CardContent, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        className: \"mb-4\",\n        children: \"Disaster Statistics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            children: [\"Total Deaths: \", ((_stats$total_deaths = stats.total_deaths) === null || _stats$total_deaths === void 0 ? void 0 : _stats$total_deaths.toLocaleString()) || 'N/A']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            children: [\"Affected Population: \", ((_stats$affected_popul = stats.affected_population) === null || _stats$affected_popul === void 0 ? void 0 : _stats$affected_popul.toLocaleString()) || 'N/A']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            children: [\"Economic Loss: $\", ((_stats$economic_loss = stats.economic_loss) === null || _stats$economic_loss === void 0 ? void 0 : _stats$economic_loss.toLocaleString()) || 'N/A']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            children: [\"Duration: \", stats.duration || 'N/A', \" days\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n// Historical Trends Component\n_c = StatsPanel;\nconst HistoricalTrends = ({\n  data\n}) => {\n  if (!data || data.length === 0) return null;\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"h-full p-4 bg-gray-50\",\n    children: /*#__PURE__*/_jsxDEV(CardContent, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        className: \"mb-4\",\n        children: \"Historical Trends\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LineChart, {\n        width: 400,\n        height: 300,\n        data: data,\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"year\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"total_deaths\",\n          stroke: \"#8884d8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"affected_population\",\n          stroke: \"#82ca9d\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n\n// Map Component with GeoJSON integration\n_c2 = HistoricalTrends;\nconst DisasterMap = ({\n  country,\n  geoJsonData,\n  disasterData\n}) => {\n  _s();\n  const [mapCenter, setMapCenter] = useState([0, 0]);\n  const [mapBounds, setMapBounds] = useState(null);\n  useEffect(() => {\n    if (geoJsonData) {\n      // Calculate center and bounds from GeoJSON\n      const bounds = L.geoJSON(geoJsonData).getBounds();\n      setMapBounds(bounds);\n      setMapCenter([(bounds.getNorth() + bounds.getSouth()) / 2, (bounds.getEast() + bounds.getWest()) / 2]);\n    }\n  }, [geoJsonData]);\n  const getColorScale = value => {\n    const scale = scaleLinear().domain([0, Math.max(...disasterData.map(d => d.severity))]).range([\"#fee8c8\", \"#e34a33\"]);\n    return scale(value);\n  };\n  const style = feature => {\n    return {\n      fillColor: getColorScale(feature.properties.severity || 0),\n      weight: 2,\n      opacity: 1,\n      color: 'white',\n      fillOpacity: 0.7\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"h-full\",\n    children: /*#__PURE__*/_jsxDEV(CardContent, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        className: \"mb-4\",\n        children: \"Disaster Impact Map\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), geoJsonData ? /*#__PURE__*/_jsxDEV(MapContainer, {\n        center: mapCenter,\n        bounds: mapBounds,\n        style: {\n          height: \"400px\",\n          width: \"100%\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n          url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n          attribution: \"\\xA9 OpenStreetMap contributors\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(GeoJSON, {\n          data: geoJsonData,\n          style: style,\n          onEachFeature: (feature, layer) => {\n            layer.bindPopup(`\n                  <strong>${feature.properties.name}</strong><br/>\n                  Severity: ${feature.properties.severity || 'N/A'}\n                `);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n        children: \"Loading map...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n};\n\n// Main App Component\n_s(DisasterMap, \"vrc/QaHTxGWiDh9uE0+SSwFpoOM=\");\n_c3 = DisasterMap;\nconst App = () => {\n  _s2();\n  const [country, setCountry] = useState(null);\n  const [year, setYear] = useState(null);\n  const [disasterType, setDisasterType] = useState(null);\n  const [csvData, setCSVData] = useState([]);\n  const [geoJsonData, setGeoJsonData] = useState(null);\n  const [searchResults, setSearchResults] = useState(null);\n\n  // Load CSV data on mount\n  useEffect(() => {\n    const fetchCSVData = async () => {\n      try {\n        const response = await axios.get('/api/disaster-data');\n        setCSVData(response.data);\n      } catch (error) {\n        console.error('Error fetching CSV data:', error);\n      }\n    };\n    fetchCSVData();\n  }, []);\n\n  // Fetch GeoJSON when country changes\n  useEffect(() => {\n    const fetchGeoJSON = async () => {\n      if (country) {\n        try {\n          const response = await axios.get(`/api/geojson/${country.code.toLowerCase()}`);\n          setGeoJsonData(response.data);\n        } catch (error) {\n          console.error('Error fetching GeoJSON:', error);\n        }\n      }\n    };\n    fetchGeoJSON();\n  }, [country]);\n  const handleSearch = () => {\n    if (country && year && disasterType) {\n      const results = processCSVData(csvData, country, year, disasterType);\n      setSearchResults(results);\n    }\n  };\n\n  // Your existing JSX for the header and search controls...\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"xl\",\n    children: searchResults && /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      className: \"mt-8\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 4,\n        children: /*#__PURE__*/_jsxDEV(DisasterMap, {\n          country: country,\n          geoJsonData: geoJsonData,\n          disasterData: searchResults\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 4,\n        children: /*#__PURE__*/_jsxDEV(StatsPanel, {\n          data: searchResults\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 4,\n        children: /*#__PURE__*/_jsxDEV(HistoricalTrends, {\n          data: searchResults\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 5\n  }, this);\n};\n_s2(App, \"selL7iF7azwdfMfj+mNDaUevdpY=\");\n_c4 = App;\nexport default App;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"StatsPanel\");\n$RefreshReg$(_c2, \"HistoricalTrends\");\n$RefreshReg$(_c3, \"DisasterMap\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Container","Typography","Button","TextField","Card","CardContent","CardMedia","AppBar","Toolbar","Grid","Autocomplete","axios","MapContainer","TileLayer","GeoJSON","scaleLinear","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","jsxDEV","_jsxDEV","processCSVData","csvData","country","year","disasterType","filter","row","label","toString","disaster_type","StatsPanel","data","_stats$total_deaths","_stats$affected_popul","_stats$economic_loss","length","children","fileName","_jsxFileName","lineNumber","columnNumber","stats","className","variant","container","spacing","item","xs","total_deaths","toLocaleString","affected_population","economic_loss","duration","_c","HistoricalTrends","width","height","strokeDasharray","dataKey","type","stroke","_c2","DisasterMap","geoJsonData","disasterData","_s","mapCenter","setMapCenter","mapBounds","setMapBounds","bounds","L","geoJSON","getBounds","getNorth","getSouth","getEast","getWest","getColorScale","value","scale","domain","Math","max","map","d","severity","range","style","feature","fillColor","properties","weight","opacity","color","fillOpacity","center","url","attribution","onEachFeature","layer","bindPopup","name","_c3","App","_s2","setCountry","setYear","setDisasterType","setCSVData","setGeoJsonData","searchResults","setSearchResults","fetchCSVData","response","get","error","console","fetchGeoJSON","code","toLowerCase","handleSearch","results","maxWidth","md","_c4","$RefreshReg$"],"sources":["C:/Users/LENOVO/Desktop/catastropi/doomindex/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  Container,\n  Typography,\n  Button,\n  TextField,\n  Card,\n  CardContent,\n  CardMedia,\n  AppBar,\n  Toolbar,\n  Grid,\n} from \"@mui/material\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport axios from \"axios\";\nimport { MapContainer, TileLayer, GeoJSON } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport { scaleLinear } from \"d3-scale\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\n\n// Utility function to process CSV data\nconst processCSVData = (csvData, country, year, disasterType) => {\n  return csvData.filter(row => \n    row.country === country.label && \n    row.year.toString() === year &&\n    row.disaster_type === disasterType.label\n  );\n};\n\n// Stats Panel Component\nconst StatsPanel = ({ data }) => {\n  if (!data || data.length === 0) return <Typography>No data available</Typography>;\n  \n  const stats = data[0]; // Assuming we're showing stats for the first matching record\n  \n  return (\n    <Card className=\"h-full p-4 bg-gray-50\">\n      <CardContent>\n        <Typography variant=\"h6\" className=\"mb-4\">Disaster Statistics</Typography>\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            <Typography variant=\"body1\">\n              Total Deaths: {stats.total_deaths?.toLocaleString() || 'N/A'}\n            </Typography>\n          </Grid>\n          <Grid item xs={12}>\n            <Typography variant=\"body1\">\n              Affected Population: {stats.affected_population?.toLocaleString() || 'N/A'}\n            </Typography>\n          </Grid>\n          <Grid item xs={12}>\n            <Typography variant=\"body1\">\n              Economic Loss: ${stats.economic_loss?.toLocaleString() || 'N/A'}\n            </Typography>\n          </Grid>\n          <Grid item xs={12}>\n            <Typography variant=\"body1\">\n              Duration: {stats.duration || 'N/A'} days\n            </Typography>\n          </Grid>\n        </Grid>\n      </CardContent>\n    </Card>\n  );\n};\n\n// Historical Trends Component\nconst HistoricalTrends = ({ data }) => {\n  if (!data || data.length === 0) return null;\n  \n  return (\n    <Card className=\"h-full p-4 bg-gray-50\">\n      <CardContent>\n        <Typography variant=\"h6\" className=\"mb-4\">Historical Trends</Typography>\n        <LineChart width={400} height={300} data={data}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"year\" />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"total_deaths\" stroke=\"#8884d8\" />\n          <Line type=\"monotone\" dataKey=\"affected_population\" stroke=\"#82ca9d\" />\n        </LineChart>\n      </CardContent>\n    </Card>\n  );\n};\n\n// Map Component with GeoJSON integration\nconst DisasterMap = ({ country, geoJsonData, disasterData }) => {\n  const [mapCenter, setMapCenter] = useState([0, 0]);\n  const [mapBounds, setMapBounds] = useState(null);\n\n  useEffect(() => {\n    if (geoJsonData) {\n      // Calculate center and bounds from GeoJSON\n      const bounds = L.geoJSON(geoJsonData).getBounds();\n      setMapBounds(bounds);\n      setMapCenter([\n        (bounds.getNorth() + bounds.getSouth()) / 2,\n        (bounds.getEast() + bounds.getWest()) / 2\n      ]);\n    }\n  }, [geoJsonData]);\n\n  const getColorScale = (value) => {\n    const scale = scaleLinear()\n      .domain([0, Math.max(...disasterData.map(d => d.severity))])\n      .range([\"#fee8c8\", \"#e34a33\"]);\n    return scale(value);\n  };\n\n  const style = (feature) => {\n    return {\n      fillColor: getColorScale(feature.properties.severity || 0),\n      weight: 2,\n      opacity: 1,\n      color: 'white',\n      fillOpacity: 0.7\n    };\n  };\n\n  return (\n    <Card className=\"h-full\">\n      <CardContent>\n        <Typography variant=\"h6\" className=\"mb-4\">Disaster Impact Map</Typography>\n        {geoJsonData ? (\n          <MapContainer\n            center={mapCenter}\n            bounds={mapBounds}\n            style={{ height: \"400px\", width: \"100%\" }}\n          >\n            <TileLayer\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n              attribution='&copy; OpenStreetMap contributors'\n            />\n            <GeoJSON \n              data={geoJsonData}\n              style={style}\n              onEachFeature={(feature, layer) => {\n                layer.bindPopup(`\n                  <strong>${feature.properties.name}</strong><br/>\n                  Severity: ${feature.properties.severity || 'N/A'}\n                `);\n              }}\n            />\n          </MapContainer>\n        ) : (\n          <Typography>Loading map...</Typography>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\n// Main App Component\nconst App = () => {\n  const [country, setCountry] = useState(null);\n  const [year, setYear] = useState(null);\n  const [disasterType, setDisasterType] = useState(null);\n  const [csvData, setCSVData] = useState([]);\n  const [geoJsonData, setGeoJsonData] = useState(null);\n  const [searchResults, setSearchResults] = useState(null);\n  \n  // Load CSV data on mount\n  useEffect(() => {\n    const fetchCSVData = async () => {\n      try {\n        const response = await axios.get('/api/disaster-data');\n        setCSVData(response.data);\n      } catch (error) {\n        console.error('Error fetching CSV data:', error);\n      }\n    };\n    fetchCSVData();\n  }, []);\n\n  // Fetch GeoJSON when country changes\n  useEffect(() => {\n    const fetchGeoJSON = async () => {\n      if (country) {\n        try {\n          const response = await axios.get(`/api/geojson/${country.code.toLowerCase()}`);\n          setGeoJsonData(response.data);\n        } catch (error) {\n          console.error('Error fetching GeoJSON:', error);\n        }\n      }\n    };\n    fetchGeoJSON();\n  }, [country]);\n\n  const handleSearch = () => {\n    if (country && year && disasterType) {\n      const results = processCSVData(csvData, country, year, disasterType);\n      setSearchResults(results);\n    }\n  };\n\n  // Your existing JSX for the header and search controls...\n\n  return (\n    <Container maxWidth=\"xl\">\n      {/* Keep your existing header and search controls */}\n      \n      {/* Results Section */}\n      {searchResults && (\n        <Grid container spacing={3} className=\"mt-8\">\n          {/* Left Column - Map */}\n          <Grid item xs={12} md={4}>\n            <DisasterMap\n              country={country}\n              geoJsonData={geoJsonData}\n              disasterData={searchResults}\n            />\n          </Grid>\n\n          {/* Middle Column - Statistics */}\n          <Grid item xs={12} md={4}>\n            <StatsPanel data={searchResults} />\n          </Grid>\n\n          {/* Right Column - Historical Trends */}\n          <Grid item xs={12} md={4}>\n            <HistoricalTrends data={searchResults} />\n          </Grid>\n        </Grid>\n      )}\n      \n      {/* Keep your existing footer */}\n    </Container>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}