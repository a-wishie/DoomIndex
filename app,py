from flask import Flask, request, jsonify
from flask_cors import CORS
import google.generativeai as genai
import pandas as pd
import os

app = Flask(__name__)
CORS(app)

# Configure Gemini API
genai.configure(api_key='YOUR_API_KEY')
model = genai.GenerativeModel('gemini-pro')

# Load data
def load_data():
    return pd.read_csv('data.csv')  # Replace with your actual file path

df = load_data()

def generate_content(prompt):
    response = model.generate_content(prompt)
    return response.text

@app.route('/api/search', methods=['GET'])
def search_disasters():
    search_term = request.args.get('term', '').lower()
    if not search_term:
        return jsonify([])
    
    filtered_df = df[df.apply(lambda row: row.astype(str).str.contains(search_term, case=False).any(), axis=1)]
    return jsonify(filtered_df.to_dict('records'))

@app.route('/api/disaster/<int:disaster_id>', methods=['GET'])
def get_disaster(disaster_id):
    if disaster_id >= len(df):
        return jsonify({'error': 'Disaster not found'}), 404
    
    disaster_data = df.iloc[disaster_id].to_dict()
    
    # Generate all content at once
    summary_prompt = f"Generate a comprehensive paragraph summarizing the following disaster:\n\n"
    public_info_prompt = f"Based on the following disaster information, generate a public information update for citizens:\n\n"
    engagement_prompt = f"Create a citizen engagement plan for the following disaster:\n\n"
    education_prompt = f"Develop educational content related to the following disaster type:\n\n"
    
    for key, value in disaster_data.items():
        summary_prompt += f"{key}: {value}\n"
        public_info_prompt += f"{key}: {value}\n"
        engagement_prompt += f"{key}: {value}\n"
    
    education_prompt += f"Disaster Type: {disaster_data['Disaster Type']}\n"
    education_prompt += f"Disaster Subtype: {disaster_data['Disaster Subtype']}\n"
    education_prompt += "\nInclude prevention measures, preparedness tips, and general information about this type of disaster."

    return jsonify({
        'disaster': disaster_data,
        'summary': generate_content(summary_prompt),
        'public_info': generate_content(public_info_prompt),
        'engagement': generate_content(engagement_prompt),
        'education': generate_content(education_prompt)
    })

@app.route('/api/chat', methods=['POST'])
def chat():
    data = request.json
    disaster_id = data.get('disaster_id')
    question = data.get('question')
    
    if disaster_id is None or question is None:
        return jsonify({'error': 'Missing parameters'}), 400
    
    disaster_data = df.iloc[disaster_id].to_dict()
    chat_prompt = f"Based on the following disaster information:\n\n"
    for key, value in disaster_data.items():
        chat_prompt += f"{key}: {value}\n"
    chat_prompt += f"\nAnswer the following question: {question}"
    
    response = generate_content(chat_prompt)
    return jsonify({'response': response})

if __name__ == '__main__':
    app.run(debug=True)